---
description:
globs:
alwaysApply: false
---
# Database Patterns & Best Practices

## Database Architecture

ZephyrZero uses GORM as the ORM with support for multiple database backends.

### Database Configuration
Primary configuration in [api/database/database.go](mdc:api/database/database.go):
- SQLite for development and testing
- PostgreSQL/MySQL for production
- Connection pooling and optimization
- Migration management

## Data Models

### User Model
Located in [api/models/user.go](mdc:api/models/user.go):
```go
type User struct {
    ID           uint      `gorm:"primaryKey"`
    Username     string    `gorm:"uniqueIndex;not null"`
    Email        string    `gorm:"uniqueIndex;not null"`
    PasswordHash string    `gorm:"not null"`
    Role         string    `gorm:"default:'user'"`
    IsActive     bool      `gorm:"default:true"`
    CreatedAt    time.Time
    UpdatedAt    time.Time
}
```

### File Model
Located in [api/models/file.go](mdc:api/models/file.go):
```go
type File struct {
    ID          string    `gorm:"primaryKey"`
    UserID      uint      `gorm:"not null;index"`
    Filename    string    `gorm:"not null"`
    Size        int64     `gorm:"not null"`
    ContentType string    `gorm:"not null"`
    Hash        string    `gorm:"not null;index"`
    IsEncrypted bool      `gorm:"default:true"`
    IsPublic    bool      `gorm:"default:false"`
    CreatedAt   time.Time
    UpdatedAt   time.Time
    User        User      `gorm:"foreignKey:UserID"`
}
```

### Audit Model
Located in [api/models/audit.go](mdc:api/models/audit.go):
```go
type AuditLog struct {
    ID        uint      `gorm:"primaryKey"`
    UserID    uint      `gorm:"index"`
    Action    string    `gorm:"not null"`
    Resource  string    `gorm:"not null"`
    IPAddress string    `gorm:"not null"`
    UserAgent string
    Timestamp time.Time `gorm:"not null;index"`
    Details   string    `gorm:"type:text"`
}
```

## Query Patterns

### Repository Pattern
Implement repository interfaces for data access:

```go
type UserRepository interface {
    Create(user *User) error
    GetByID(id uint) (*User, error)
    GetByUsername(username string) (*User, error)
    Update(user *User) error
    Delete(id uint) error
}
```

### Query Optimization
- Use indexes on frequently queried columns
- Implement pagination for large result sets
- Use select fields to limit data transfer
- Implement query caching where appropriate

### Transaction Management
- Use database transactions for multi-step operations
- Implement rollback on failure
- Keep transactions short and focused
- Avoid nested transactions

## Security Considerations

### Data Encryption
- Encrypt sensitive fields at the application layer
- Use database-level encryption for additional protection
- Implement field-level encryption for PII
- Secure key management for database encryption

### Access Control
- Use database users with minimal required privileges
- Implement connection string encryption
- Regular database access auditing
- Row-level security where supported

### SQL Injection Prevention
- Use GORM's built-in parameterization
- Validate input before database operations
- Avoid raw SQL queries when possible
- Regular security scanning of database queries

## Migration Strategy

### Schema Migrations
- Version-controlled database schema changes
- Automated migration on application startup
- Rollback procedures for failed migrations
- Data migration scripts for schema changes

### Data Seeding
- Initial data setup for new installations
- Test data for development environments
- Reference data management
- Environment-specific data seeding

## Performance Optimization

### Indexing Strategy
- Primary keys on all tables
- Foreign key indexes for relationships
- Composite indexes for complex queries
- Regular index performance analysis

### Connection Management
- Connection pooling configuration
- Connection timeout settings
- Maximum connection limits
- Connection health monitoring

### Query Performance
- Query execution plan analysis
- Slow query identification and optimization
- Database statistics maintenance
- Regular performance monitoring

## Backup & Recovery

### Backup Strategy
- Regular automated backups
- Point-in-time recovery capability
- Backup integrity verification
- Cross-region backup replication

### Data Retention
- Audit log retention policies
- File metadata cleanup procedures
- User data anonymization for deleted accounts
- Compliance with data retention regulations

## Monitoring & Maintenance

### Database Monitoring
- Query performance metrics
- Connection pool utilization
- Storage capacity monitoring
- Error rate tracking

### Maintenance Tasks
- Regular statistics updates
- Index maintenance and rebuilding
- Partition management for large tables
- Database health checks
