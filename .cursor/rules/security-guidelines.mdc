---
description:
globs:
alwaysApply: false
---
# Security Guidelines - Zero Trust Architecture

## Zero Trust Principles

ZephyrZero implements comprehensive zero-trust security:

### Never Trust, Always Verify
- Every request requires authentication
- Validate user permissions for each resource access
- Implement session timeout and account lockout mechanisms
- Continuous monitoring of user behavior

### Least Privilege Access
- Users can only access resources they own or have explicit permission to
- Role-based access control (RBAC)
- Granular permissions for different operations
- Regular access reviews and cleanup

## Authentication & Authorization

### JWT Token Security
Implementation in [api/utils/jwt.go](mdc:api/utils/jwt.go):
- Use strong, randomly generated secrets (minimum 32 bytes)
- Set appropriate token expiration times
- Implement token refresh mechanism
- Blacklist compromised tokens

### Password Security
- Enforce strong password policies
- Use bcrypt for password hashing (minimum cost 12)
- Implement account lockout after failed attempts
- Support multi-factor authentication (MFA)

### Session Management
- Secure session handling
- Automatic session timeout
- Session invalidation on logout
- Track concurrent sessions per user

## Data Protection

### Encryption at Rest
File encryption handled in [api/utils/crypto.go](mdc:api/utils/crypto.go):
- AES-256 encryption for all stored files
- Unique encryption key per file
- Secure key management and rotation
- Encrypted database fields for sensitive data

### Encryption in Transit
- Force HTTPS for all communications
- Use TLS 1.3 minimum
- Implement HTTP security headers
- Certificate pinning for API clients

### Data Integrity
- SHA-256 hashing for file integrity verification
- Checksum validation on upload and download
- Tamper detection mechanisms
- Backup integrity verification

## Input Validation & Sanitization

### Request Validation
Located in [api/utils/validator.go](mdc:api/utils/validator.go):
- Validate all input parameters
- Sanitize user input to prevent injection attacks
- Implement file type and size restrictions
- Check for malicious file content

### SQL Injection Prevention
- Use parameterized queries exclusively
- Input sanitization and validation
- ORM-based database access (GORM)
- Database user with minimal privileges

## Audit & Monitoring

### Comprehensive Logging
Implementation in [api/services/audit_service.go](mdc:api/services/audit_service.go):
- Log all authentication attempts
- Record all file operations (upload, download, delete)
- Track administrative actions
- Monitor system resource usage

### Security Event Detection
- Failed login attempt tracking
- Unusual access pattern detection
- Large file transfer monitoring
- Privileged operation logging

### Audit Log Protection
- Append-only audit logs
- Log integrity protection
- Secure log storage and backup
- Regular log analysis and alerting

## Configuration Security

### Environment Variables
- Store sensitive configuration in environment variables
- Never commit secrets to version control
- Use secure configuration management
- Regular secret rotation

### Production Hardening
- Disable debug mode in production
- Remove development tools and utilities
- Implement proper error handling (no information disclosure)
- Regular security updates and patches

## API Security

### Rate Limiting
- Implement API rate limiting per user/IP
- Progressive delays for repeated failures
- Resource-based throttling
- DDoS protection mechanisms

### CORS & Security Headers
- Properly configured CORS policies
- Security headers (HSTS, CSP, X-Frame-Options)
- No sensitive information in headers
- Secure cookie attributes

## File Security

### Upload Security
- File type validation and restrictions
- Malware scanning capabilities
- File size limits and quotas
- Secure file storage location

### Download Security
- Access control verification before download
- Download activity logging
- Bandwidth throttling
- Content-Type header validation

## Development Security

### Code Security
- Regular dependency updates
- Static code analysis
- Security-focused code reviews
- Vulnerability scanning

### Testing Security
- Security test cases
- Penetration testing procedures
- Regular security assessments
- Compliance validation
